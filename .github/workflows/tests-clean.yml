name: 🧪 Testes Completos

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saas_barber_test
  REDIS_URL: redis://localhost:6379
  JWT_SECRET: test-jwt-secret-key-for-ci
  JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci

jobs:
  # Teste do Backend
  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_barber_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔧 Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: 🗃️ Setup database
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        
    - name: 🧪 Run backend tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        REDIS_URL: ${{ env.REDIS_URL }}
        JWT_SECRET: ${{ env.JWT_SECRET }}
        JWT_REFRESH_SECRET: ${{ env.JWT_REFRESH_SECRET }}
        
    - name: 🏗️ Build backend
      run: |
        cd backend
        npm run build

  # Teste do Frontend
  test-frontend:
    name: 🎨 Frontend Tests  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔧 Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🧪 Run frontend tests
      run: |
        cd frontend
        npm test
        
    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build

  # Testes E2E
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_barber_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps
      
    - name: 🗃️ Setup database for E2E
      run: |
        cd backend
        npm ci
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        
    - name: 🚀 Start backend server
      run: |
        cd backend
        npm run dev &
        sleep 10
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        REDIS_URL: ${{ env.REDIS_URL }}
        JWT_SECRET: ${{ env.JWT_SECRET }}
        JWT_REFRESH_SECRET: ${{ env.JWT_REFRESH_SECRET }}
        PORT: 3001
        
    - name: 🚀 Start frontend server
      run: |
        cd frontend
        npm ci
        npm run dev &
        sleep 10
      env:
        VITE_API_URL: http://localhost:3001
        
    - name: 🎭 Run E2E tests
      run: npx playwright test
      
    - name: 📊 Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

  # Verificação de Lint
  lint-check:
    name: 🔍 Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint backend
      run: |
        cd backend
        npm ci
        npm run lint
        
    - name: 🔍 Lint frontend
      run: |
        cd frontend
        npm ci
        npm run lint
