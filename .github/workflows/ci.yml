name: 🧪 Tests and Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Verificação de código e linting
  lint:
    name: 📋 Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🧹 Lint Backend
        run: cd backend && npm run lint -- --config .eslintrc.js
      
      - name: 🎨 Lint Frontend  
        run: cd frontend && npm run lint -- --config .eslintrc.cjs
      
      - name: 🔍 Type Check Backend
        run: cd backend && npm run type-check:ci
      
      - name: 🔍 Type Check Frontend
        run: cd frontend && npm run type-check:ci

  # Job 2: Testes do Backend
  test-backend:
    name: 🏗️ Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: saas_barber_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
        
      - name: 🔧 Install dependencies
        run: cd backend && npm ci
      
      - name: 🗃️ Setup test database
        run: |
          cd backend
          cp .env.test.example .env.test || cp .env.example .env.test
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
        
      - name: 🧪 Run Backend Tests
        run: cd backend && npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          JWT_EXPIRES_IN: 15m
          JWT_REFRESH_EXPIRES_IN: 7d

  # Job 3: Testes do Frontend
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
        
      - name: 🔧 Install dependencies
        run: cd frontend && npm ci
      
      - name: 🧪 Run Frontend Tests
        run: cd frontend && npm test

  # Job 4: Testes E2E
  test-e2e:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: saas_barber_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        
      - name: 🔧 Install root dependencies
        run: npm ci
      
      - name: 🔧 Install backend dependencies
        run: cd backend && npm ci
      
      - name: 🔧 Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: 🔧 Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: 🗃️ Setup test database
        run: |
          cd backend
          cp .env.test.example .env.test || cp .env.example .env.test
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
        
      - name: 🚀 Start backend server
        run: cd backend && npm run start:test &
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          JWT_EXPIRES_IN: 15m
          JWT_REFRESH_EXPIRES_IN: 7d
          PORT: 3001
      
      - name: 🚀 Start frontend server
        run: cd frontend && npm run preview &
        env:
          VITE_API_URL: http://localhost:3001
      
      - name: ⏱️ Wait for servers
        run: |
          echo "Waiting for servers to start..."
          sleep 10
      
      - name: 🧪 Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:4173
          API_URL: http://localhost:3001
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 5: Relatório final
  report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, test-e2e]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📋 Generate Summary
        run: |
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.test-frontend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
