name: CI/CD SaaS Barber

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_barber_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saas_barber_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Instalar dependências backend
        run: |
          cd backend; npm ci
      - name: Gerar Prisma Client
        run: |
          cd backend; npx prisma generate
      - name: Rodar migrations
        run: |
          cd backend; npx prisma migrate deploy
      - name: Rodar lint e type-check
        run: |
          cd backend; npm run lint; npm run type-check:ci
      - name: Rodar testes unitários/backend
        run: |
          cd backend; npm test
      - name: Upload resultados de teste
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/test-results/

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Instalar dependências frontend
        run: |
          cd frontend; npm ci
      - name: Rodar lint e type-check
        run: |
          cd frontend; npm run lint; npm run type-check:ci
      - name: Rodar testes unitários/frontend
        run: |
          cd frontend; npm test
      - name: Upload resultados de teste
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: frontend/test-results/

  test-e2e:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_barber_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saas_barber_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Instalar dependências backend
        run: |
          cd backend; npm ci
      - name: Instalar dependências frontend
        run: |
          cd frontend; npm ci
      - name: Gerar Prisma Client
        run: |
          cd backend; npx prisma generate
      - name: Rodar migrations
        run: |
          cd backend; npx prisma migrate deploy
      - name: Build frontend
        run: |
          cd frontend; npm run build
      - name: Rodar testes E2E (Playwright)
        run: |
          npx playwright install --with-deps; cd e2e; npx playwright test
      - name: Upload resultados E2E
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: e2e/playwright-report/

# Fim do workflow corrigido