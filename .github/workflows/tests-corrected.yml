name: 🧪 Tests and Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Verificação de código e linting
  lint:
    name: 📋 Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🧹 Lint Backend
        run: cd backend && npm run lint -- --config .eslintrc.js
      
      - name: 🎨 Lint Frontend  
        run: cd frontend && npm run lint -- --config .eslintrc.cjs
      
      - name: 🔍 Type Check Backend
        run: cd backend && npm run type-check:ci
      
      - name: 🔍 Type Check Frontend
        run: cd frontend && npm run type-check:ci

  # Job 2: Testes do Backend
  test-backend:
    name: 🏗️ Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: saas_barber_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🗃️ Setup test database
        run: |
          cd backend
          cp .env.test.example .env.test || cp .env.example .env.test
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
        
      - name: 🧪 Run Backend Tests
        run: cd backend && npm test -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        
      - name: 📊 Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Job 3: Testes do Frontend
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🧪 Run Frontend Tests
        run: cd frontend && npm run test -- --coverage
      
      - name: 📊 Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 4: Build Test
  build:
    name: 🔨 Build Test
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build Backend
        run: cd backend && npm run build
      
      - name: 🎨 Build Frontend
        run: cd frontend && npm run build
      
      - name: 📦 Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/dist/

  # Job 5: Testes E2E (apenas em main/develop)
  test-e2e:
    name: 🔄 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: saas_barber_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
      
      - name: 🗃️ Setup test database
        run: |
          cd backend
          cp .env.test.example .env.test || cp .env.example .env.test
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
        
      - name: 🚀 Start Backend
        run: cd backend && npm start &
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barber_test?schema=public
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        
      - name: 🎨 Start Frontend
        run: cd frontend && npm run build && npm run preview &
      
      - name: ⏳ Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
      - name: 🧪 Run E2E Tests
        run: npm run test:e2e
      
      - name: 📊 Upload E2E Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Job 6: Relatório final
  report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, build]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📋 Generate Summary
        run: |
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.test-frontend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Useful Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Backend Coverage Report](https://codecov.io/github/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Frontend Coverage Report](https://codecov.io/github/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
